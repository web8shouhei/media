'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _css = require('css');

var _css2 = _interopRequireDefault(_css);

var _gulpUtil = require('gulp-util');

var _gulpUtil2 = _interopRequireDefault(_gulpUtil);

var _replaceExt = require('replace-ext');

var _replaceExt2 = _interopRequireDefault(_replaceExt);

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * plugin name
 * @type {String}
 */
var PLUGIN_NAME = 'gulp-css2txt';

/**
 * extract text contents from css
 * @return {Through} Gulp Plugin function
 */
var css2txt = function css2txt() {

  /**
   * Transform
   * @param  {Vinyl}    file     File object typed Vinyl
   * @param  {string}   encode   character encoding
   * @param  {Function} callback called at the end of transform
   * @return {void}
   */
  function transform(file, encode, callback) {

    // null input
    if (file.isNull()) {
      // nothing to do
      return callback(null, file);
    }

    // buffer mode
    if (file.isBuffer()) {
      var result = file.clone();

      try {
        result.contents = new Buffer(_css2.default.parse(result.contents.toString()).stylesheet.rules.map(function (x) {
          return x.declarations;
        }).reduce(function (prev, declarations) {
          return prev.concat(declarations);
        }, []) // flatten
        .filter(function (x) {
          return x && x.property === 'content' && typeof x.value === 'string' && x.value.length > 0 && (x.value[0] === '\'' && x.value[x.value.length - 1] === '\'' || x.value[0] === '"' && x.value[x.value.length - 1] === '"');
        }) // pick { content: <string> } up
        .map(function (x) {
          return x.value;
        }).map(function (x) {
          return x.split('').splice(1, x.length - 2).join('');
        }) // unwrap quotes
        .map(function (x) {
          return x[0] === '\\' ? String.fromCharCode(parseInt('0x' + x.split('').splice(1, x.length - 1).join(''))) : x;
        }) // decode '\fff' as '0xfff'
        .join(''));
      } catch (err) {
        this.emit('error', new _gulpUtil2.default.PluginError(PLUGIN_NAME, err));
        return;
      }

      result.path = (0, _replaceExt2.default)(file.path, '.txt');
      this.push(result);
      return callback();
    }

    // stream mode
    if (file.isStream()) {
      this.emit('error', new _gulpUtil2.default.PluginError(PLUGIN_NAME, 'Streams not supported!'));
      return;
    }
  }

  /**
   * Flush
   * @param  {Function} callback called at end of flush
   * @return {void}
   */
  function flush(callback) {
    return callback();
  }

  return _through2.default.obj(transform, flush);
};

exports.default = css2txt;


if (module) {
  module.exports = css2txt;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ndWxwLWNzczJ0eHQuanMiXSwibmFtZXMiOlsiUExVR0lOX05BTUUiLCJjc3MydHh0IiwidHJhbnNmb3JtIiwiZmlsZSIsImVuY29kZSIsImNhbGxiYWNrIiwiaXNOdWxsIiwiaXNCdWZmZXIiLCJyZXN1bHQiLCJjbG9uZSIsImNvbnRlbnRzIiwiQnVmZmVyIiwicGFyc2UiLCJ0b1N0cmluZyIsInN0eWxlc2hlZXQiLCJydWxlcyIsIm1hcCIsIngiLCJkZWNsYXJhdGlvbnMiLCJyZWR1Y2UiLCJwcmV2IiwiY29uY2F0IiwiZmlsdGVyIiwicHJvcGVydHkiLCJ2YWx1ZSIsImxlbmd0aCIsInNwbGl0Iiwic3BsaWNlIiwiam9pbiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInBhcnNlSW50IiwiZXJyIiwiZW1pdCIsIlBsdWdpbkVycm9yIiwicGF0aCIsInB1c2giLCJpc1N0cmVhbSIsImZsdXNoIiwib2JqIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7O0FBSUEsSUFBTUEsY0FBYyxjQUFwQjs7QUFFQTs7OztBQUlBLElBQU1DLFVBQVUsU0FBVkEsT0FBVSxHQUFXOztBQUV6Qjs7Ozs7OztBQU9BLFdBQVNDLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCQyxNQUF6QixFQUFpQ0MsUUFBakMsRUFBMkM7O0FBRXpDO0FBQ0EsUUFBSUYsS0FBS0csTUFBTCxFQUFKLEVBQW1CO0FBQ25CO0FBQ0UsYUFBT0QsU0FBUyxJQUFULEVBQWVGLElBQWYsQ0FBUDtBQUNEOztBQUVEO0FBQ0EsUUFBSUEsS0FBS0ksUUFBTCxFQUFKLEVBQXFCO0FBQ25CLFVBQU1DLFNBQVNMLEtBQUtNLEtBQUwsRUFBZjs7QUFFQSxVQUFJO0FBQ0ZELGVBQU9FLFFBQVAsR0FBa0IsSUFBSUMsTUFBSixDQUNoQixjQUFJQyxLQUFKLENBQVVKLE9BQU9FLFFBQVAsQ0FBZ0JHLFFBQWhCLEVBQVYsRUFBc0NDLFVBQXRDLENBQWlEQyxLQUFqRCxDQUNHQyxHQURILENBQ087QUFBQSxpQkFBS0MsRUFBRUMsWUFBUDtBQUFBLFNBRFAsRUFFR0MsTUFGSCxDQUVVLFVBQUNDLElBQUQsRUFBT0YsWUFBUDtBQUFBLGlCQUF3QkUsS0FBS0MsTUFBTCxDQUFZSCxZQUFaLENBQXhCO0FBQUEsU0FGVixFQUU2RCxFQUY3RCxFQUVpRTtBQUZqRSxTQUdHSSxNQUhILENBR1U7QUFBQSxpQkFBS0wsS0FDQUEsRUFBRU0sUUFBRixLQUFlLFNBRGYsSUFFQSxPQUFPTixFQUFFTyxLQUFULEtBQW1CLFFBRm5CLElBR0FQLEVBQUVPLEtBQUYsQ0FBUUMsTUFBUixHQUFpQixDQUhqQixLQUtHUixFQUFFTyxLQUFGLENBQVEsQ0FBUixNQUFlLElBQWYsSUFBdUJQLEVBQUVPLEtBQUYsQ0FBUVAsRUFBRU8sS0FBRixDQUFRQyxNQUFSLEdBQWlCLENBQXpCLE1BQWdDLElBQXhELElBQ0NSLEVBQUVPLEtBQUYsQ0FBUSxDQUFSLE1BQWUsR0FBZixJQUF1QlAsRUFBRU8sS0FBRixDQUFRUCxFQUFFTyxLQUFGLENBQVFDLE1BQVIsR0FBaUIsQ0FBekIsTUFBZ0MsR0FOMUQsQ0FBTDtBQUFBLFNBSFYsRUFXWTtBQVhaLFNBWUdULEdBWkgsQ0FZTztBQUFBLGlCQUFLQyxFQUFFTyxLQUFQO0FBQUEsU0FaUCxFQWFHUixHQWJILENBYU87QUFBQSxpQkFBS0MsRUFBRVMsS0FBRixDQUFRLEVBQVIsRUFBWUMsTUFBWixDQUFtQixDQUFuQixFQUFzQlYsRUFBRVEsTUFBRixHQUFXLENBQWpDLEVBQW9DRyxJQUFwQyxDQUF5QyxFQUF6QyxDQUFMO0FBQUEsU0FiUCxFQWEwRDtBQWIxRCxTQWNHWixHQWRILENBY087QUFBQSxpQkFBS0MsRUFBRSxDQUFGLE1BQVMsSUFBVCxHQUNFWSxPQUFPQyxZQUFQLENBQ0NDLFNBQVMsT0FBT2QsRUFBRVMsS0FBRixDQUFRLEVBQVIsRUFBWUMsTUFBWixDQUFtQixDQUFuQixFQUFzQlYsRUFBRVEsTUFBRixHQUFXLENBQWpDLEVBQW9DRyxJQUFwQyxDQUF5QyxFQUF6QyxDQUFoQixDQURELENBREYsR0FHS1gsQ0FIVjtBQUFBLFNBZFAsRUFrQlE7QUFsQlIsU0FtQkdXLElBbkJILENBbUJRLEVBbkJSLENBRGdCLENBQWxCO0FBc0JELE9BdkJELENBdUJFLE9BQU9JLEdBQVAsRUFBWTtBQUNaLGFBQUtDLElBQUwsQ0FBVSxPQUFWLEVBQW1CLElBQUksbUJBQU1DLFdBQVYsQ0FBc0JsQyxXQUF0QixFQUFtQ2dDLEdBQW5DLENBQW5CO0FBQ0E7QUFDRDs7QUFFRHhCLGFBQU8yQixJQUFQLEdBQWMsMEJBQVdoQyxLQUFLZ0MsSUFBaEIsRUFBc0IsTUFBdEIsQ0FBZDtBQUNBLFdBQUtDLElBQUwsQ0FBVTVCLE1BQVY7QUFDQSxhQUFPSCxVQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxRQUFJRixLQUFLa0MsUUFBTCxFQUFKLEVBQXFCO0FBQ25CLFdBQUtKLElBQUwsQ0FBVSxPQUFWLEVBQW1CLElBQUksbUJBQU1DLFdBQVYsQ0FBc0JsQyxXQUF0QixFQUFtQyx3QkFBbkMsQ0FBbkI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7O0FBS0EsV0FBU3NDLEtBQVQsQ0FBZWpDLFFBQWYsRUFBeUI7QUFDdkIsV0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQU8sa0JBQVFrQyxHQUFSLENBQVlyQyxTQUFaLEVBQXVCb0MsS0FBdkIsQ0FBUDtBQUNELENBdkVEOztrQkF5RWVyQyxPOzs7QUFFZixJQUFJdUMsTUFBSixFQUFZO0FBQ1ZBLFNBQU9DLE9BQVAsR0FBaUJ4QyxPQUFqQjtBQUNEIiwiZmlsZSI6Imd1bHAtY3NzMnR4dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjc3MgICAgICAgIGZyb20gJ2NzcydcbmltcG9ydCBndXRpbCAgICAgIGZyb20gJ2d1bHAtdXRpbCdcbmltcG9ydCByZXBsYWNlRXh0IGZyb20gJ3JlcGxhY2UtZXh0J1xuaW1wb3J0IHRocm91Z2ggICAgZnJvbSAndGhyb3VnaDInXG5cbi8qKlxuICogcGx1Z2luIG5hbWVcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKi9cbmNvbnN0IFBMVUdJTl9OQU1FID0gJ2d1bHAtY3NzMnR4dCdcblxuLyoqXG4gKiBleHRyYWN0IHRleHQgY29udGVudHMgZnJvbSBjc3NcbiAqIEByZXR1cm4ge1Rocm91Z2h9IEd1bHAgUGx1Z2luIGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNzczJ0eHQgPSBmdW5jdGlvbigpIHtcblxuICAvKipcbiAgICogVHJhbnNmb3JtXG4gICAqIEBwYXJhbSAge1ZpbnlsfSAgICBmaWxlICAgICBGaWxlIG9iamVjdCB0eXBlZCBWaW55bFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgZW5jb2RlICAgY2hhcmFjdGVyIGVuY29kaW5nXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0cmFuc2Zvcm1cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybShmaWxlLCBlbmNvZGUsIGNhbGxiYWNrKSB7XG5cbiAgICAvLyBudWxsIGlucHV0XG4gICAgaWYgKGZpbGUuaXNOdWxsKCkpIHtcbiAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZmlsZSlcbiAgICB9XG5cbiAgICAvLyBidWZmZXIgbW9kZVxuICAgIGlmIChmaWxlLmlzQnVmZmVyKCkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGZpbGUuY2xvbmUoKVxuXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQuY29udGVudHMgPSBuZXcgQnVmZmVyKFxuICAgICAgICAgIGNzcy5wYXJzZShyZXN1bHQuY29udGVudHMudG9TdHJpbmcoKSkuc3R5bGVzaGVldC5ydWxlc1xuICAgICAgICAgICAgLm1hcCh4ID0+IHguZGVjbGFyYXRpb25zKVxuICAgICAgICAgICAgLnJlZHVjZSgocHJldiwgZGVjbGFyYXRpb25zKSA9PiBwcmV2LmNvbmNhdChkZWNsYXJhdGlvbnMpLCBbXSkgLy8gZmxhdHRlblxuICAgICAgICAgICAgLmZpbHRlcih4ID0+IHggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICB4LnByb3BlcnR5ID09PSAnY29udGVudCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgeC52YWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICB4LnZhbHVlLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoeC52YWx1ZVswXSA9PT0gJ1xcJycgJiYgeC52YWx1ZVt4LnZhbHVlLmxlbmd0aCAtIDFdID09PSAnXFwnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICh4LnZhbHVlWzBdID09PSAnXCInICAmJiB4LnZhbHVlW3gudmFsdWUubGVuZ3RoIC0gMV0gPT09ICdcIicgKVxuICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSAvLyBwaWNrIHsgY29udGVudDogPHN0cmluZz4gfSB1cFxuICAgICAgICAgICAgLm1hcCh4ID0+IHgudmFsdWUpXG4gICAgICAgICAgICAubWFwKHggPT4geC5zcGxpdCgnJykuc3BsaWNlKDEsIHgubGVuZ3RoIC0gMikuam9pbignJykpIC8vIHVud3JhcCBxdW90ZXNcbiAgICAgICAgICAgIC5tYXAoeCA9PiB4WzBdID09PSAnXFxcXCcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCgnMHgnICsgeC5zcGxpdCgnJykuc3BsaWNlKDEsIHgubGVuZ3RoIC0gMSkuam9pbignJykpXG4gICAgICAgICAgICAgICAgICAgICAgICkgOiB4XG4gICAgICAgICAgICAgICAgKSAvLyBkZWNvZGUgJ1xcZmZmJyBhcyAnMHhmZmYnXG4gICAgICAgICAgICAuam9pbignJylcbiAgICAgICAgKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgZ3V0aWwuUGx1Z2luRXJyb3IoUExVR0lOX05BTUUsIGVycikpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICByZXN1bHQucGF0aCA9IHJlcGxhY2VFeHQoZmlsZS5wYXRoLCAnLnR4dCcpXG4gICAgICB0aGlzLnB1c2gocmVzdWx0KVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICAvLyBzdHJlYW0gbW9kZVxuICAgIGlmIChmaWxlLmlzU3RyZWFtKCkpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgZ3V0aWwuUGx1Z2luRXJyb3IoUExVR0lOX05BTUUsICdTdHJlYW1zIG5vdCBzdXBwb3J0ZWQhJykpXG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmx1c2hcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxlZCBhdCBlbmQgb2YgZmx1c2hcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIGZsdXNoKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgfVxuXG4gIHJldHVybiB0aHJvdWdoLm9iaih0cmFuc2Zvcm0sIGZsdXNoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjc3MydHh0XG5cbmlmIChtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjc3MydHh0XG59XG4iXX0=